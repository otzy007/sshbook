#!/usr/bin/env ruby

################################################################################
#  The MIT License (MIT)
# 
# Copyright (c) 2012 - 2013 Andrei Gliga
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights 
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is 
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in 
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
################################################################################

# SSH address book ;)
require 'yaml'

$HOSTS_FILE = "~/.sshbook.yml"

$hosts = YAML.load(File.read(File.expand_path($HOSTS_FILE)))

def available_hosts
   puts "Available hosts"
   $hosts.each {|host| puts "* " + host[0]}
end

class Actions
   # Delete a connection by it's name
   def delete
      unless ARGV[1]
	 puts "Usage: sshbook -d name\n\n"
	 available_hosts
	 exit 1
      end
      if $hosts.delete ARGV[1]
	 save
      else
	 puts "No such host\n\n"
	 available_hosts
	 exit 1
      end
   end
   
   # Add a connection
   def add
       size = 1
      script = options = host = command = nil
      
      # Check if there is a script to store
      if i = ARGV.find_index('-s')
	 script = ARGV[i + 1]
	 size += 2
      end
   
      # Check if there are any ssh options
      if j = ARGV.find_index('-o')
	 options = ARGV[j + 1]
	 size += 2
      end
      
      if k = ARGV.find_index('-c')
	 command = ARGV[k + 1]
	 size += 2
      end
      
      # Get the host and the connection name from the args
      name = ARGV[size]
      host = ARGV[size + 1]

      size += 2
      unless size == ARGV.size
	 puts "Usage: sshbook -a [-s script] [-o options] name [user@host]" 
	 exit 0
      end
      
      unless script
	 $hosts[name] = {'user' => host.split('@')[0], 'host' => host.split('@')[1], 'options' => options, 'command' => command}
      else
	 $hosts[name] = {'user' => host, 'script' => script, 'options' => options, 'command' => command}
      end
      save
   end
private
   def save
      file = File.open(File.expand_path($HOSTS_FILE), 'w')
      file.write($hosts.to_yaml)
   end
end

if $0 == __FILE__
   case ARGV[0]
   when nil
      puts "Usage: sshbook connection [command]\nTry 'sshbook -h' for more information.\n\n"
      available_hosts
      exit 1
   when '-d'
      Actions.new.delete
   when '-a'
      Actions.new.add
   when '-l'
      available_hosts
   when '-h'
      puts "Usage: sshbook connection [command]\n\nOptions:\n"
      puts "-a [-o options] [-c command] name user@host\t\tStore a connection for user@host by the name"
      puts "-a -s script [-o options] [-c command] name user\tStore a connection with a script that will get the host"
      puts "-d connection\t\t\t\tDelete a connection"
      puts "-h\t\t\t\t\tPrint this help"
      puts "-l\t\t\t\t\tList the connections"
      puts "\n\nExample:\n"
      puts "sshbook local ls\t\t\t\tExecute ls on the local connection"
      puts "sshbook -a -o -Y local user@localhost\t\tAdd a connection named local to localhost with the X forwarding (-Y) option"
      puts "sshbook -a -s \"cat /etc/HOSTNAME\" local user\tAdd a connection based on the hostname read from /etc/HOSTNAME"
      puts "sshbook -a -c ls local user@localhost Add a connection that executes ls"
      puts "sshbook -d local\t\t\t\tDelete the local connection"
   else
      host = $hosts[ARGV[0]]

      if !host
	 puts "sshbook: No such host " +  ARGV[0] + "\n\n"
	 available_hosts
	 exit 1
      end

      if host['host']
	 address = host['user'] + '@' + host['host']
      elsif host['script']
         # get the ip as a result of a script
	 address = eval host['script']
      end
      puts "Connecting to " + address
      exec("ssh #{host['options'] if host['options']} #{address} #{ARGV[1]}")
   end
end